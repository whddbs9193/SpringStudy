<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
<!-- 빈(객체) 등록 -->
<!-- 관리자 입장에서 실행코드(TVUser)는 건드리지않고 여기있는 코드만 바꾸면 객체가 바뀐다  즉 여기서 ->samsung 를 lg로 바꾼다 -->

<!-- 1. 객체 초기화 메소드, 객체 삭제 메소드 -->
<!-- <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod"/> -->

<!-- 2. lazy-init 속성: 즉시 실행되는 것이 아니라 사용되는 시점에 실행되도록 하는 속성  -->
<!-- <bean id="tv" class="polymorphism.SamsungTV" lazy-init="true"/> -->

<!-- 3. scope 속성: singleton(기본값, 한번만 호출), prototype(모든 객체를 생성) -->
<!-- <bean id="tv" class="polymorphism.SamsungTV" scope="singleton" /> -->

<!--
< 스프링에서 설정을 하는 방법 >
1. xml 파일에 설정사항을 적는 방법
- xml 파일에 설정 사항을 계속 추가하게 되면 문제점이 발생 -> xml 파일이 커지고, 복잡하게 되어서 유지 보수가 어려워지는 문제에 봉착하게 됨.
-> 개선책: 소스파일에 설정사항을 적어둠.

2. 애노테이션으로 설정사항을 적는 방법(소스 파일에 설정)



 ##### 3. xml과 애노테이션을 혼용하는 방법 ##### 
 1. xml로 설정하는 경우 : 자주 바뀔 가능성이 있는 것 ex) 스피커 
 2. 애노테이션으로 설정하는 경우 : 자주 바뀔 가능성이 없는 것
-->
<context:component-scan base-package="polymorphism" />
<bean class="polymorphism.SamsungTV"></bean>

<!-- ##### 2. 애노테이션으로 설정사항을 적는 방법 ##### -->



<!-- ##### 1. xml 파일에 설정사항을 적는 방법 ##### -->
<!-- DI(Dependency Injection -->
<!-- 세터 인젝션을 좀더 선호함. -->
<!-- 1. 생성자 인젝션(Constructor Injection -->
<!-- 
<bean id="tv" class="polymorphism.SamsungTV" scope="singleton">
	<constructor-arg ref="speaker"></constructor-arg>  인스턴스(객체) 넘겨주기 (speaker)
	<constructor-arg value="1500000"></constructor-arg> 변수넘 겨주기
</bean>

<bean id="speaker" class="polymorphism.SonySpeaker" />
 -->
 
 <!-- 2-1. 세터 인젝션(Setter Injection) 1번 -->
 <!--  
 <bean id="tv" class="polymorphism.SamsungTV">
 	<property name="speaker" ref="sony"/>
 	<property name="price" value="1500000"/>
 </bean>
 -->
 
 <!-- 2-2. 세터 인젝션(Setter Injection) 2번: p-namespace를 사용 -->
 <!--  
 <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="apple" p:price="2000000"/>
 
 <bean id="sony" class="polymorphism.SonySpeaker"/>
 <bean id="apple" class="polymorphism.AppleSpeaker"/>
 -->
</beans>
